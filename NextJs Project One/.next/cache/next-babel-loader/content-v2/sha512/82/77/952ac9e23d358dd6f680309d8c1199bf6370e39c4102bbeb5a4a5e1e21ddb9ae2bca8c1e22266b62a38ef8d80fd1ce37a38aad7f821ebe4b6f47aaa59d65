{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\awood\\\\OneDrive\\\\Desktop\\\\React\\\\NextJs Project One\\\\pages\\\\index.js\";\n// our-domain.com/\n// import Layout from \"../components/layout/Layout\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nfunction HomePage(props) {\n  //static generation cs server side rendering\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this); //request and fetch data only loads on first cycle and initial items (TODO Enhhance SEO Page PreRendering )\n} // //generates on every incoming request\n// //this can be bad because we need to wait on an individual request for it to work ;(\n//   // ssg with static props is faster and we can utilize caching\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   //Fetch data from an API(no need for revalidate property)\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     }\n//   }\n// }\n//calls this function before it calls the component() and we pass the required data here\n\n\n_c = HomePage;\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/awood/OneDrive/Desktop/React/NextJs Project One/pages/index.js"],"names":["MeetupList","HomePage","props","meetups"],"mappings":";;AAAA;AAGA;AACA,OAAOA,UAAP,MAAuB,kCAAvB;;AA6BA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AACA,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP,CAFuB,CAGvB;AACD,C,CAED;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;KAvBSF,Q;;AAwDT,eAAeA,QAAf","sourcesContent":["// our-domain.com/\r\nimport { MongoClient } from \"mongodb\";\r\n\r\n// import Layout from \"../components/layout/Layout\";\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\n\r\nconst DUMMY_MEETUPS = [\r\n  {\r\n    id: \"m1\",\r\n    title: \"A First Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\r\n    address: \"Some address, 12345 Some City\",\r\n    description: \"This is A First Meetup!\",\r\n  },\r\n  {\r\n    id: \"m2\",\r\n    title: \"A Second Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/8/84/Holy_SURP_Hovhannes_Church.jpg\",\r\n    address: \"Some address, 12345 Some City\",\r\n    description: \"This is A Second Meetup!\",\r\n  },\r\n  {\r\n    id: \"m3\",\r\n    title: \"A Third Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/7/7e/16-03-30-Klagemauer_Jerusalem_RalfR-DSCF7689.jpg\",\r\n    address: \"Some address, 12345 Some City\",\r\n    description: \"This is A Third Meetup!\",\r\n  },\r\n];\r\n\r\nfunction HomePage(props) {\r\n  //static generation cs server side rendering\r\n  return <MeetupList meetups={props.meetups} />;\r\n  //request and fetch data only loads on first cycle and initial items (TODO Enhhance SEO Page PreRendering )\r\n}\r\n\r\n// //generates on every incoming request\r\n\r\n// //this can be bad because we need to wait on an individual request for it to work ;(\r\n//   // ssg with static props is faster and we can utilize caching\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   //Fetch data from an API(no need for revalidate property)\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS,\r\n//     }\r\n//   }\r\n// }\r\n\r\n//calls this function before it calls the component() and we pass the required data here\r\n\r\nexport async function getStaticProps() {\r\n  //Fetch Data from an API\r\n  const client = await MongoClient.connect(\r\n    `mongodb+srv://12345:12345@cluster0.dizvn9k.mongodb.net/meetups?retryWrites=true&w=majority`\r\n  );\r\n  const db = client.db();\r\n  //nosql collections are kind of like sql tables but are documents with JSON data\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  //find finds all the documents in that collection and to array formats all the data into an array\r\n\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  client.close();\r\n\r\n  //move data fetching away from the client and to the server through props and this returned props:{}\r\n  //revalidate unlocks Incremental Static Generation: Generates during the build process\r\n  //then regenerates/pushes a new page as indicated 1 seconds after each render cycle.\r\n  return {\r\n    props: {\r\n      meetups:\r\n        (DUMMY_MEETUPS &&\r\n        meetups.map((meetup) => ({\r\n          title: meetup.title,\r\n          address: meetup.address,\r\n          image: meetup.image,\r\n          id: meetup._id.toString(),\r\n        }))),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}