{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\awood\\\\OneDrive\\\\Desktop\\\\React\\\\NextJs Project One\\\\pages\\\\[meetupId]\\\\index.js\";\nimport Head from \"next/head\";\nimport MeetUpDetail from \"../../components/meetups/MeetupDetail\"; //strucutured it like this with the sep comp because we want the css styles and reactjs props\n//passed via props\n\nfunction MeetupDetails(props) {\n  //dynamic expressions for title and props.description for details data in the content field\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} //getStaticPaths is for prepage rendering for dynamic pages via params\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["C:/Users/awood/OneDrive/Desktop/React/NextJs Project One/pages/[meetupId]/index.js"],"names":["Head","MeetUpDetail","MeetupDetails","props","meetupData","title","description","image","address"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAGA,OAAOC,YAAP,MAAyB,uCAAzB,C,CACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B;AACA,sBACE;AAAA,4BACA,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEI;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAF5B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAQE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD1B;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH5B;AAIE,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBE;AAJhC;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAiBD,C,CAED;;;KArBSJ,a;;AAmFT,eAAeA,aAAf","sourcesContent":["import Head from \"next/head\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nimport MeetUpDetail from \"../../components/meetups/MeetupDetail\";\r\n//strucutured it like this with the sep comp because we want the css styles and reactjs props\r\n//passed via props\r\n\r\nfunction MeetupDetails(props) {\r\n  //dynamic expressions for title and props.description for details data in the content field\r\n  return (\r\n    <>\r\n    <Head>\r\n      <title>{props.meetupData.title}</title>\r\n        <meta\r\n          name=\"description\"\r\n          content={props.meetupData.description}\r\n        />\r\n    </Head>\r\n      <MeetUpDetail\r\n        image={props.meetupData.image}\r\n        title={props.meetupData.title}\r\n        address={props.meetupData.address}\r\n        description={props.meetupData.description}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//getStaticPaths is for prepage rendering for dynamic pages via params\r\nexport async function getStaticPaths() {\r\n  //Fetch Data from an API\r\n  const client = await MongoClient.connect(\r\n    `mongodb+srv://12345:12345@cluster0.dizvn9k.mongodb.net/meetups?retryWrites=true&w=majority`\r\n  );\r\n  const db = client.db();\r\n  //nosql collections are kind of like sql tables but are documents with JSON data\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  //first arg are all the collection objects we want to find in this db\r\n  //second arg in find is what field we want to extract from the collection i.e the id field for this dynamic page\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  //fallback allows us to pregenerate some of our pages for specific id values\r\n  //array of objects of the path and params objs we want and their id keys\r\n  return {\r\n    fallback: true,\r\n    //dynamically render the path with the db API data id keys\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\n//get static props is for rendering the specified data for each id value and it's props\r\nexport async function getStaticProps(context) {\r\n  // Fetch data for a single meetup\r\n\r\n  //concrete meetup id for the meetup(s) we render through a context key obj it passes our url param i.e \"m1\"\r\n  const meetupId = context.params.meetupId;\r\n\r\n  //Fetch Data from an API\r\n  const client = await MongoClient.connect(\r\n    `mongodb+srv://12345:12345@cluster0.dizvn9k.mongodb.net/meetups?retryWrites=true&w=majority`\r\n  );\r\n  const db = client.db();\r\n  //nosql collections are kind of like sql tables but are documents with JSON data\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  //the id is the dynamic path id we setup in our file directory [meetupId]\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}