{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetUpDetail from \"../../components/meetups/MeetupDetail\"; //strucutured it like this with the sep comp because we want the css styles and reactjs props\n//passed via props\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsx(MeetUpDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  });\n} //getStaticPaths is for prepage rendering for dynamic pages via params\n\n\nexport async function getStaticPaths() {\n  //Fetch Data from an API\n  const client = await MongoClient.connect(`mongodb+srv://12345:12345@cluster0.dizvn9k.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db(); //nosql collections are kind of like sql tables but are documents with JSON data\n\n  const meetupsCollection = db.collection(\"meetups\"); //first arg are all the collection objects we want to find in this db\n  //second arg in find is what field we want to extract from the collection i.e the id field for this dynamic page\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close(); //fallback allows us to pregenerate some of our pages for specific id values\n  //array of objects of the path and params objs we want and their id keys\n\n  return {\n    fallback: true,\n    //dynamically render the path with the db API data id keys\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} //get static props is for rendering the specified data for each id value and it's props\n\nexport async function getStaticProps(context) {\n  // Fetch data for a single meetup\n  //concrete meetup id for the meetup(s) we render through a context key obj it passes our url param i.e \"m1\"\n  const meetupId = context.params.meetupId; //Fetch Data from an API\n\n  const client = await MongoClient.connect(`mongodb+srv://12345:12345@cluster0.dizvn9k.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db(); //nosql collections are kind of like sql tables but are documents with JSON data\n\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}